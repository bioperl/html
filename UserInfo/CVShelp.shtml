<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>

    <!--#include virtual="/_header_start.html" -->

<STYLE TYPE="text/css">
<!--
#side-developers { font-weight: 800 }
-->
</STYLE>


<TITLE> Bioperl CVS help </TITLE>

    <!--#include virtual="/_header_end.html" -->
    <!--#include virtual="/_body_start.html" -->
    <!--#include virtual="/_main_heading.html" -->

    <!--#include virtual="/_main_table_start.html" -->
    <!--#include virtual="/_sidebar.html" -->
    <!--#include virtual="/_small_margin_col.html" -->
    <!--#include virtual="/_main_content_start.html" -->
    <!--#include virtual="/_main_content_table_start.html" -->

<B><font face="Arial, Helvetica, sans-serif" color="#000080">
Bioperl CVS help
</font></B><BR>
</TD>
</TR>
<TD> 
<!-- INSERT YOUR  CONTENT HERE -->

<TR>
<TD>

This page tells you about how you can use the cvs system in the bioperl set up.
<p>
Index
<ul>
<li><a href="#reqs">Requirements</a>
<li><a href="#first">Making a local copy for the first time</a>
<li><a href="#ex">An example session</a>
<li><a href="#conf">Conflict resolution</a>
<li><a href="#comm">Common cvs commands</a>
<li><a href="#rel"> Making a release</a>
<li><a href="#bug"> Making a bug fix branch and a release</a>
</ul>
<a name=reqs><h2>Requirements</h2></a>
To use the CVS system you must have
<ul>
<li> An account on bio.perl.org, unless you are <a href="http://cvs.bioperl.org">using anonymous CVS</a> for read-only access
<li> secure shell (ssh) on your own machine (ssh homepage is at <a href="http://www.ssh.fi/">www.ssh.fi</a>)
<li> cvs (cvs homepage is at <a href="http://www.sourcegear.com/CVS">www.sourcegear.com/CVS</a>)
<li> setenv'd CVS_RSH to ssh
</ul>
<hr>
<a name=first><h2>Making a local copy for the first time</h2></a>

Obviously, you need to make sure you have cvs and ssh installed on your local
machine. Check out the links listed above.
<p>

To start a cvs local copy from scratch, move to a clean area where you expect
to see your working bioperl-live directories from, then go
<pre>
prompt%cvs -d :ext:birney@bio.perl.org:/home/repository/bioperl checkout bioperl-live
</pre>
(Obviously you'll substitute the birney for your own name)
<p>
This will build the bioperl-live tree for you from the CVS system with all the current .pm files
in it.
<p>
To check out the html tree go
<pre>
prompt%cvs -d :ext:birney@bio.perl.org:/home/repository/bioperl checkout html
</pre>
To check out only a portion of the html (or bioperl-live) tree you can do it easily, as
<pre>
prompt%cvs -d :ext:birney@bio.perl.org:/home/repository/bioperl checkout html/UserInfo
</pre>
html/UserInfo is a valid directory in the html tree (where in fact this page lives!)
<p>

The checkout process produces a copy of the directory structure as real read/write files and
an additional file in each directory called CVS. The CVS file contains the information about which
cvs repository this directory comes from and which files in the directory are part of the repository 
(this way you can clutter you your local copy of the repository with temporary files and it is fine).
You work in your local copy as if it was the root copy. Once you have made all the changes you want to
make you go
<pre>
cvs commit
</pre>
which 'publishes' your changes back to the repository.
<p>
<hr>
<a name=ex><h2>An example session</h2></a>
So, an example session (once you have set up your local copy) of an entire days/sessions work is
<ul>
<li>Wake up, get a cup of coffee, cd into your local copy of the cvs directory and type
<p>
<pre>
cvs update
</pre>
which brings your local copy up to date with the repository
<li>Browse around any of the files that have changed (by other people) that you are interested in 
<li>Do your work on the local copy. 
<li>Make sure the local copy is in a sensible state, ie, it at least compiles
<li>publish your changes by going
<p>
<pre>
cvs commit
</pre>
<li>Drop a mail to perl-guts saying what you have done, and go to sleep ;)
</ul>
The important thing about cvs is that if you
<ul>
<li>Work in the cvs local copy as your primary development area
<li>use cvs commit and cvs update often
</ul>
Then it works really well and it is freaky about how cvs coordinates the work.
It is much more important that the cvs system <b>is up-to-date</b> than that the latest
view of the repository works. In other words, if you are in doubt about whether to 
cvs commit or not, always commit. Other people can always get back to an older version
of the cvs system using cvs commands.
<p>
Notice there is no concept of a <b>lock</b> in the cvs system. Freaky... but it works.
<hr>
<a name=conf><h2>Conflict resolution</h2></a>

Somewhere along the line two people will edit the same file in their local directory
and each person wants to check it in. This is a conflict. This is how cvs deals with it:
<ul>
<li> The person to cvs commit first works fine
<li> The second person gets a conflict warning, and the file is shown in their local directory
with 
<pre>
>>>>>>>
    some stuff
<<<<<<<
    other stuff
<<<<<<<
</pre>
The regions in this file are the regions which are in conflict, and it is up to the second person
to deal with it.
<p>
<li> The second person edits the file (locally) and cvs commits again, producing a clean copy.
<li> It is very polite for the second person to get in  touch with the first person and explained
what happened. People should double check the file in any case...
</ul>
<hr>
<a name=comm><h2>Common commands</h2></a>

The structure of all cvs commands are
<pre>
cvs ACTION
</pre>

<ul>
<li>cvs update - updates your local copy wrt to the repository (do this first thing when you get in)
<li>cvs commit - publish your local changes to the repository (do this last thing before you leave!)
<li>cvs status - see whether files have been changed locally or in the repository
<li>cvs add <b>filename</b> - add file to the repository
<li>cvs remove <b>filename</b> - remove a file from the repository
</ul>
Do these commands from the Bio directory (inside it). cvs knows where to find the repository due
to the CVS directories scattered around the place.
<p>
<h2><a name=rel>Making a Release</a></h2>

To make a release you need to do a number of things
<ul>
<li> Check it passes make test etc in your bioperl-live directory 
<li> Double check everything
<li> tag the version you have in the bioperl-live directory by going
<pre>
cvs tag release-0-04-0
</pre>
Tags must be non whitespace characters and start with a letter
<li> cd outside of the bioperl directory
<li> Make a new export of the release using the tag
<pre>
cvs -d /home/repository/bioperl export -r release-0-04-0 -d bioperl-0.04 bioperl-live
</pre>
Notice here that
<ul>
<li> I used precisely the same tag in the release-0-04-0 as the tag. There is <i>no</i> semantics
to the tag line. It just a ascii string that signifies something.
<li> I used the -d option after export to make sure I exported into the bioperl-0.04 directory,
not the bioperl-live directory, otherwise I will overwrite the bioperl-live directory...
</ul>
<p>
<li> Now cd into bioperl-0.04 and type perl Makefile.PL, make, make test, (should pass!) and then
make dist (make the distribution). Then - take the distribution somewhere else, untar it, go
perl Makefile.PL, make, make test 
<li> Post to guts/bioperl about the release. 
</ul>

<h2><a name=bug>Making a bug fix branch and a release</a></h2>

You <i>Must</i> have tagged the release you want to make a bug fix to.
<p>
Say we want to make a bug fix to 0.04. Here is what we do:
<ul>
<li><b>Either</b> there is already a bug fix branch at 0.04 <b>or</b>
you have to make one. If you are going to make one, it is probably best
to post to guts first and ask people there if there is already one
built. You can check out the symbolic tags by going cvs log README in
the top level directory
<ul>
<li> To make a branch in the repository if noone else has for this release go
<pre>
cvs -d /home/repository/bioperl rtag -r release-0-04-0 -b release-0-04-bug bioperl-live
</pre>

This make a branch in the repository at the 0-04 level called release-0-04-bug
</ul>
<li> move to a clean area and checkout the release-0-04-bug branch by going
<pre>
cvs -d /home/repository/bioperl checkout -r release-0-04-bug bioperl-live
</pre>
<li> Now fix the bug, and then behave as in the standard making a release in this directory... so 
<ul>
<li> Fix the bug, and check it works in this directory.
<li> tag the release with a <code>cvs tag release-0-04-1</code> or
suchlike tag
<li> Export a clean copy of the relaese using 
<pre>
cvs -d /home/repository/bioperl export -r release-0-04-1 -d bioperl-0.04.1 bioperl-live
</pre>
<li>Check this works, tar it up and check it works somewhere else.
</ul>
</ul>

<p>
To see what tags a file already as in it go

<pre>
cvs log README | more
</pre>

To see what branch the local repository is on, go...

<pre>
cvs log README | more
</pre>

The sticky tag will be set to something if you are in a branch.

<p>
<b>This page is still under construction. In the meantime Ewan Birney 
<a href=mailto:birney@sanger.ac.uk>birney@sanger.ac.uk</a>
is probably the one to address your CVS questions to.</b>
</TD>
</TR>

<tr>
<td>
<font face="Arial, Helvetica, sans-serif" size=+1>
<a href="/UserInfo/">&lt;&lt;back</a>
</font>
</td>
</tr>

<!-- END YOUR CONTENT BEFORE THIS LINE -->


    <!--#include virtual="/_main_content_table_end.html" -->
    <!--#include virtual="/_main_content_end.html" -->
    <!--#include virtual="/_main_table_end.html" -->

    <! ### START CVS DATESTAMP >
    <P ALIGN=RIGHT>Last Modified: $Date: 2000-03-31 19:14:06 $</P>
    <! ### STOP CVS DATESTAMP >

    <! ### START CVS REVISION >
    <!-- $Id: CVShelp.shtml,v 1.2 2000-03-31 19:14:06 dag Exp $ -->
    <! ### STOP CVS REVISION >

    <!--#include virtual="/_body_end.html" -->
</HTML>
